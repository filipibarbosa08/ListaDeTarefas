/*
 * Frame Crud: interface que possibilita as operações Crud 
 *  para realização das operações de Inserção,consulta,
 * alteração e exclusão das tarefas cadastrados no banco de dados.
 */
package ui;

import core.ResultSetTableModel;
import dao.Tarefa;
import dao.TarefaQueries;
import java.awt.Color;
import java.awt.Cursor;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Filipi
 */
public class FrmCrud extends javax.swing.JFrame {
    
   

    private Tarefa tarefa;
    private TarefaQueries tarefaQueries;
    private String user;

    /**
     * Construtor vazio
     */
    public FrmCrud() {
        initComponents();
    }
    
    
    /**
     * Construtor com a string com o nome do usuário que efetuou o login.
     * Neste método é inicializado os componentes do frame,
     * é criado a instância da classe tarefa que será utilizada para manipular os dados
     * da tarefa e a instância da classe tarefaQueries que será utilizada para execução
     * das Queries e updates do banco de dados na tabela tarefa, após isso, é atribuido
     * a uma string o nome do usuário que está logado para uso externo ao método construtor.
     * por fim, a tabela é populada com as tarefas recuperadas do banco de dados
     * e o nome do usuário é setado em um label do frame.
     *  
     * 
     */

    public FrmCrud(String usuario) {
        initComponents();

        tarefa = new Tarefa();
        tarefaQueries = new TarefaQueries();
        user = usuario;
        
        

        try {
            tblTarefas.setModel(new ResultSetTableModel("SELECT `codigo`, `data`, `descricao` FROM `tarefa`"
                    + " where usuario = '" + user +"'"));

        } catch (SQLException sqle) {
            JOptionPane.showMessageDialog(null, sqle);
        }

        lblUsuario.setText(usuario);

    }

    // Método responsável por verificar se data é válida
    public boolean isValid(String date) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate d = LocalDate.parse(date, formatter);
            return true;
        } catch (DateTimeParseException e) {
            return false;
        }
    }

    // Método responsável por limpar e resetar botão excluir
    public void limparCampos() {
        tfCodigo.setText("");
        tfData.setText("");
        tfDescricao.setText("");
        btnExcluir.setEnabled(false);

        
        Color corBackground = new Color(200, 200, 200);
        Color corForeground = new Color(255, 255, 255);

        btnExcluir.setBackground(corBackground);
        btnExcluir.setForeground(corForeground);
        btnExcluir.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPrincipal = new javax.swing.JPanel();
        pnlTarefa = new javax.swing.JPanel();
        lblCodigo = new javax.swing.JLabel();
        lblData = new javax.swing.JLabel();
        lblDescricao = new javax.swing.JLabel();
        tfCodigo = new javax.swing.JTextField();
        tfDescricao = new javax.swing.JTextField();
        tfData = new javax.swing.JFormattedTextField();
        btnLimpar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnCadastrar = new javax.swing.JButton();
        scrlTabela = new javax.swing.JScrollPane();
        tblTarefas = new javax.swing.JTable();
        lblPesquisar = new javax.swing.JLabel();
        tfPesquisa = new javax.swing.JTextField();
        lblListaDeTarefasDe = new javax.swing.JLabel();
        lblUsuario = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        pnlTarefa.setBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.controlDkShadow, 1, true));

        lblCodigo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblCodigo.setText("Código:");

        lblData.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblData.setText("Data:");

        lblDescricao.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblDescricao.setText("Descrição:");

        tfCodigo.setBackground(new java.awt.Color(0, 106, 195));
        tfCodigo.setEnabled(false);

        try {
            tfData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout pnlTarefaLayout = new javax.swing.GroupLayout(pnlTarefa);
        pnlTarefa.setLayout(pnlTarefaLayout);
        pnlTarefaLayout.setHorizontalGroup(
            pnlTarefaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTarefaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTarefaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCodigo)
                    .addComponent(lblData)
                    .addComponent(lblDescricao))
                .addGap(33, 33, 33)
                .addGroup(pnlTarefaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfData, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        pnlTarefaLayout.setVerticalGroup(
            pnlTarefaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTarefaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTarefaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCodigo))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(pnlTarefaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblData)
                    .addComponent(tfData, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlTarefaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescricao))
                .addGap(86, 86, 86))
        );

        btnLimpar.setBackground(new java.awt.Color(255, 255, 255));
        btnLimpar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnLimpar.setForeground(new java.awt.Color(0, 106, 195));
        btnLimpar.setText("Limpar");
        btnLimpar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnLimpar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnExcluir.setBackground(java.awt.SystemColor.scrollbar);
        btnExcluir.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnExcluir.setForeground(new java.awt.Color(255, 255, 255));
        btnExcluir.setText("Excluir");
        btnExcluir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnExcluir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnExcluir.setEnabled(false);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnAlterar.setBackground(new java.awt.Color(0, 106, 195));
        btnAlterar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnAlterar.setForeground(new java.awt.Color(255, 255, 255));
        btnAlterar.setText("Alterar");
        btnAlterar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAlterar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnCadastrar.setBackground(new java.awt.Color(0, 106, 195));
        btnCadastrar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnCadastrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCadastrar.setText("Cadastrar");
        btnCadastrar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCadastrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        tblTarefas.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tblTarefas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Código", "Data", "Descrição"
            }
        ));
        tblTarefas.setRowHeight(22);
        tblTarefas.setSelectionBackground(java.awt.SystemColor.text);
        tblTarefas.setSelectionForeground(java.awt.SystemColor.controlDkShadow);
        tblTarefas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTarefasMouseClicked(evt);
            }
        });
        scrlTabela.setViewportView(tblTarefas);

        lblPesquisar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblPesquisar.setText("Pesquisar (Descrição):");

        tfPesquisa.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tfPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfPesquisaKeyPressed(evt);
            }
        });

        lblListaDeTarefasDe.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblListaDeTarefasDe.setText("Usuário:");

        lblUsuario.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblUsuario.setText("Nome do usuário");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Lista de tarefas");

        javax.swing.GroupLayout pnlPrincipalLayout = new javax.swing.GroupLayout(pnlPrincipal);
        pnlPrincipal.setLayout(pnlPrincipalLayout);
        pnlPrincipalLayout.setHorizontalGroup(
            pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlTabela)
                    .addComponent(pnlTarefa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlPrincipalLayout.createSequentialGroup()
                        .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tfPesquisa)
                    .addGroup(pnlPrincipalLayout.createSequentialGroup()
                        .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPesquisar)
                            .addGroup(pnlPrincipalLayout.createSequentialGroup()
                                .addComponent(lblListaDeTarefasDe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblUsuario))
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlPrincipalLayout.setVerticalGroup(
            pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPrincipalLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblListaDeTarefasDe)
                    .addComponent(lblUsuario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(pnlTarefa, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addComponent(scrlTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPesquisar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
          /**
         * Após clicar no botão cadastrar, é executa o código abaixo, 
         * que verifica se contém algum campo vazio, caso estejam preenchidos, os campos
         * são capturados e formatados e posteriormente são utilizados
         * para execução da query de cadastrar, por fim, a tabela é atualizada.
         * 
         */
        
        
        if (tfDescricao.getText().isEmpty() || tfData.getText().isEmpty() || tfData.getText().equals("  /  /    ")) {

            JOptionPane.showMessageDialog(null, "Todos os campos devem "
                    + "estar preenchidos");
        } else if (isValid(tfData.getText())) {

            tarefa.setDescricao(tfDescricao.getText());

            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");

            String data = tfData.getText();

            try {
                java.sql.Date datasql = new java.sql.Date(formato.parse(data).getTime());
                tarefa.setData(datasql);
            } catch (ParseException ex) {
                Logger.getLogger(FrmCrud.class.getName()).log(Level.SEVERE, null, ex);
            }

            boolean tarefaCadastrada = tarefaQueries.addTarefa(tarefa.getDescricao(), tarefa.getData(),user);

            if (tarefaCadastrada) {
                JOptionPane.showMessageDialog(this, "Tarefa Agendada");

                try {
                       tblTarefas.setModel(new ResultSetTableModel("SELECT `codigo`, `data`, `descricao` FROM `tarefa`"
                    + " where usuario = '" + user +"'"));

                    limparCampos();

                } catch (SQLException sqle) {

                }

            } else {
                JOptionPane.showMessageDialog(this, "Erro ao agendar tarefa",
                        "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Data inválida");
        }
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        /**
         * Após clicar no botão alterar, é executa o código abaixo, 
         * que verifica se contém algum campo vazio, caso estejam preenchidos, os campos
         * são capturados e formatados e posteriormente são utilizados
         * para execução da query de alteração, por fim, a tabela é atualizada.
         * 
         */
        
        
        if (tfDescricao.getText().isEmpty() || tfData.getText().isEmpty() || tfData.getText().equals("  /  /    ")) {

            JOptionPane.showMessageDialog(null, "Todos os campos devem "
                    + "estar preenchidos");
        } else if (isValid(tfData.getText())) {

            tarefa.setDescricao(tfDescricao.getText());
            tarefa.setCodigo(Integer.parseInt(tfCodigo.getText()));

            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");

            String data = tfData.getText();

            try {
                java.sql.Date datasql = new java.sql.Date(formato.parse(data).getTime());
                tarefa.setData(datasql);
            } catch (ParseException ex) {
                Logger.getLogger(FrmCrud.class.getName()).log(Level.SEVERE, null, ex);
            }

            boolean tarefaCadastrada = tarefaQueries.updateTarefa(tarefa.getCodigo(), tarefa.getDescricao(), tarefa.getData(), lblUsuario.getText());

            if (tarefaCadastrada) {
                JOptionPane.showMessageDialog(this, "Tarefa Alterada");

                try {
                   tblTarefas.setModel(new ResultSetTableModel("SELECT `codigo`, `data`, `descricao` FROM `tarefa`"
                    + " where usuario = '" + user +"'"));

                    limparCampos();

                } catch (SQLException sqle) {

                }

            } else {
                JOptionPane.showMessageDialog(this, "Erro ao alterar tarefa",
                        "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Data inválida");
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        /**
         * Após clicar no botão limpar, é executa o código abaixo, 
         * que faz uma chamada do método limpar campos, e assim limpa todos os textFields.
         * 
         */
        
        limparCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void tblTarefasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTarefasMouseClicked
        /**
         * Após clicar sobre uma linha da tabela, é executa o código abaixo, 
         * que captura os dados da tarefa selecionada e preenche
         * nos textfields correspondentes.
         * 
         */
        
        
        btnExcluir.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnExcluir.setEnabled(true);
        Color color = new Color(0, 106, 195);
        btnExcluir.setBackground(color);

        tfCodigo.setText(tblTarefas.getValueAt(tblTarefas.getSelectedRow(), 0).toString());
        tfDescricao.setText(tblTarefas.getValueAt(tblTarefas.getSelectedRow(), 2).toString());

        SimpleDateFormat formatoSql = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat formatoBr = new SimpleDateFormat("dd/MM/yyyy");
        String data = tblTarefas.getValueAt(tblTarefas.getSelectedRow(), 1).toString();

        try {
            Date databr = new java.sql.Date(formatoSql.parse(data).getTime());
            tfData.setText(formatoBr.format(databr));
        } catch (ParseException ex) {
            Logger.getLogger(FrmCrud.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_tblTarefasMouseClicked

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        
         /**
         * Após clicar no botão excluir, é executa o código abaixo, 
         * que captura o código da tarefa selecionada e executa a query para exclusão do mesmo,
         * por fim, a tabela é atualizada.
         * 
         */
        
        int codigo = Integer.parseInt(tfCodigo.getText());
        if (tarefaQueries.deleteTarefa(codigo) == true) {
            JOptionPane.showMessageDialog(this, "Tarefa excluída com sucesso !");
        }
        try {
            tblTarefas.setModel(new ResultSetTableModel("SELECT `codigo`, `data`, `descricao` FROM `tarefa`"
                    + " where usuario = '" + user +"'"));
             limparCampos();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao excluir produto");
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void tfPesquisaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPesquisaKeyPressed
        /**
         * Após digitar no TextField destinado a pesquisa, é executa o código abaixo, 
         * que a cada tecla digitada faz um select no banco  filtrando as tarefas do banco
         * equivalentes a tarefa até então digitada.
         * 
         */
        
        
        String qry = "Select `codigo`, `data`, `descricao` FROM `tarefa` where usuario = '" + user +"'" + "AND descricao"
              + " LIKE'" + tfPesquisa.getText() + "%'";
              
        try {
            tblTarefas.setModel(new ResultSetTableModel(qry));
        } catch (SQLException ex) {
            
        }
    }//GEN-LAST:event_tfPesquisaKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmCrud().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JLabel lblListaDeTarefasDe;
    private javax.swing.JLabel lblPesquisar;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JPanel pnlPrincipal;
    private javax.swing.JPanel pnlTarefa;
    private javax.swing.JScrollPane scrlTabela;
    private javax.swing.JTable tblTarefas;
    private javax.swing.JTextField tfCodigo;
    private javax.swing.JFormattedTextField tfData;
    private javax.swing.JTextField tfDescricao;
    private javax.swing.JTextField tfPesquisa;
    // End of variables declaration//GEN-END:variables
}
